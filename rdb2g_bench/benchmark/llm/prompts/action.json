{
"add_fk_pk_edge": "Here is the introduction of add_fk_pk_edge:\nDescription:\nCreates a directed edge from one table to another by adding a foreign key (FK) to primary key (PK) relationship. \nUse when you need to represent an important directional relationship between two tables in your graph schema.\nParameters:\n    from_table_name: the name of the table containing the foreign key\n    from_col_name: the name of the foreign key column in to_table\n    to_table_name: the name of the table containing the primary key",
"remove_fk_pk_edge": "Here is the introduction of remove_fk_pk_edge:\nDescription:\nEliminates a directed edge between tables by removing a FK-PK relationship. \nUse when a previously modeled relationship doesn't add meaningful context to your graph structure and should be excluded.\nParameters:\n    from_table_name: the name of the table containing the foreign key\n    from_col_name: the name of the primary key column in to_table\n    to_table_name: the name of the table containing the primary key",
"convert_row_to_edge": "Here is the introduction of convert_row_to_edge:\nDescription:\nTransforms what was originally modeled as an entity table into a relationship edge in your graph. \nUse when an intermediate table (denoted as edge_table_name) better represents a relationship property between two tables (denoted as table_1_name and table_2_name) rather than being an independent entity.\nNote that table_1_name and table_2_name can be equal when the edge_table_name has 2 foreign keys which refer to the same primary key.\nParameters:\n    table_1_name: the name of the first row table\n    table_2_name: the name of the second row table\n    edge_table_name: the name of the table to convert to edge between table_1_name and table_2_name",
"convert_edge_to_row": "Here is the introduction of convert_edge_to_row:\nDescription:\nTransforms what was modeled as a relationship edge into a proper entity table in your graph. \nUse when an edge contains sufficient attributes and identity to justify becoming an entity table with its own properties.\nNote that table_1_name and table_2_name can be equal when the edge_table_name has 2 foreign keys which refer to the same primary key.\nParameters:\n    table_1_name: the name of the first row table\n    table_2_name: the name of the second row table\n    edge_table_name: the name of the edge table to convert to rows between table_1_name and table_2_name",
"add_row2edge_edge": "Here is the introduction of add_row2edge_edge:\nDescription:\nCreate a new edge (relationship) between two tables by introducing an edge (join) table.\nUse this when a many-to-many relationship between two tables is needed and meaningful for your graph schema.\nParameters:\n    table_1_name: the name of the first row table\n    table_2_name: the name of the second row table\n    edge_table_name: the name of the edge table to convert to rows between table_1_name and table_2_name",
"remove_row2edge_edge": "Here is the introduction of remove_row2edge_edge:\nDescription:\nRemove an edge (relationship) between two tables by deleting the edge (join) table.\nUse this when the many-to-many relationship is not necessary for your graph schema.\nParameters:\n    table_1_name: the name of the first row table\n    table_2_name: the name of the second row table\n    edge_table_name: the name of the edge table to convert to rows between table_1_name and table_2_name"
}